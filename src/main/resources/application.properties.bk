# All the supported logging systems 
# can have the logger levels set in the Spring Environment (for example, in application.properties) by using logging.level.<logger-name>=<level>
# where level is one of TRACE, DEBUG, INFO, WARN, ERROR, FATAL, or OFF. The root logger can be configured by using logging.level.root.

# The following example shows potential logging settings in application.properties:

# logging.level.root=WARN
# logging.level.org.springframework.web=DEBUG
# logging.level.org.hibernate=ERROR

# failure analyzers are able to handle the exception
# logging.level.org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener=DEBUG

# https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-application-admin
# jconsole 사용
# spring.application.admin.enabled=true
spring.output.ansi.enabled=always

# Spring Cloud Config를 사용해도 된다.
# name=parkjongsoo
# name=${random.uuid}
# name=propertySettingValue

# project의 directory에도 application.properties 가 존재 할 수 있다. application.properties가 resource 폴더(2)와 project's directory(1) 에 둘 다 존재 할 때 각각의 우선순위가 있다.
# command line argument로 properties 파일의 이름(spring.config.name) 또는 경로(spring.config.location)를 줄 수 있다. (우선순위가 높다.)

# https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/PropertySource.html

# foo=${random.uuid}
foo=propertyFoo
name=AddFoo ${foo}
spring.profiles.active=A,B